cmake_minimum_required(VERSION 3.20)

#################################################
# Begin configuration options

set(CMAKE_BUILD_TYPE Release)

# Minimally needed projects
set(LLVM_PROJECTS llvm;clang;lld)

# # If doing development, clang-tidy and clangd are nice to have
# set(LLVM_PROJECTS llvm;clang;lld;clang-tools-extra)

# # Nice to have if hacking LLVM:
# list(APPEND LLVM_CMAKE_ARGS -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON)
# list(APPEND LLVM_CMAKE_ARGS -DBUILD_SHARED_LIBS:BOOL=ON)
# list(APPEND LLVM_CMAKE_ARGS -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF)

# If not hacking LLVM, preferred build method:
list(APPEND LLVM_CMAKE_ARGS -DBUILD_SHARED_LIBS:BOOL=OFF)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_LINK_LLVM_DYLIB:BOOL=ON)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON)

# # If compiling with newer LLD and getting link errors, try this (see https://reviews.llvm.org/D135402):
# list(APPEND LLVM_CMAKE_ARGS -DCMAKE_EXE_LINKER_FLAGS:STRING=-Wl,--undefined-version)
# list(APPEND LLVM_CMAKE_ARGS -DCMAKE_SHARED_LINKER_FLAGS:STRING=-Wl,--undefined-version)

# End configuration options
#################################################

include(ExternalProject)

project(riscv-llvm-toolchain)

set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR})

list(APPEND LLVM_CMAKE_ARGS -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER})
list(APPEND LLVM_CMAKE_ARGS -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER})

list(APPEND LLVM_CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE})
list(APPEND LLVM_CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:STRING=${CMAKE_INSTALL_PREFIX})
list(APPEND LLVM_CMAKE_ARGS -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=riscv64-unknown-elf)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD:STRING=RISCV)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_ENABLE_PROJECTS:STRING=${LLVM_PROJECTS})
list(APPEND LLVM_CMAKE_ARGS -DLLVM_ENABLE_LLD:BOOL=ON)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_ENABLE_LTO:STRING=Thin)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_EXTERNALIZE_DEBUGINFO:BOOL=ON)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_USE_SPLIT_DWARF:BOOL=ON)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON)
list(APPEND LLVM_CMAKE_ARGS -DLLVM_PARALLEL_LINK_JOBS:STRING=2)

# Some utilities are still having problems with DWARF 5
list(APPEND LLVM_CMAKE_ARGS -DCMAKE_ASM_FLAGS:STRING=-fdebug-default-version=4)
list(APPEND LLVM_CMAKE_ARGS -DCMAKE_C_FLAGS:STRING=-fdebug-default-version=4)
list(APPEND LLVM_CMAKE_ARGS -DCMAKE_CXX_FLAGS:STRING=-fdebug-default-version=4)

ExternalProject_Add(llvm
    SOURCE_DIR       ${CMAKE_SOURCE_DIR}/llvm-project

    CMAKE_GENERATOR Ninja
    SOURCE_SUBDIR	llvm
    CMAKE_CACHE_ARGS            ${LLVM_CMAKE_ARGS}
    CMAKE_CACHE_DEFAULT_ARGS    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
    CONFIGURE_HANDLED_BY_BUILD  YES
    BUILD_ALWAYS                YES

    # Give terminal output:
    USES_TERMINAL_CONFIGURE     YES
    USES_TERMINAL_BUILD         YES
    USES_TERMINAL_INSTALL       YES
    
)
